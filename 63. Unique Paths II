<-- Problem Statement -->
You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The testcases are generated so that the answer will be less than or equal to 2 * 109.


Code :
class Solution {
private:
    int memo(int i, int j, vector<vector<int>>& obstacleGrid, vector<vector<int>>& dp) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if (i >= m || j >= n || obstacleGrid[i][j] == 1) return 0;
        if (i == m - 1 && j == n - 1) return 1;
        if (dp[i][j] != -1)  return dp[i][j];
        return dp[i][j] = memo(i + 1, j, obstacleGrid, dp) + memo(i, j + 1, obstacleGrid, dp);
    }

    int tabulation(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        // DP table of size m x n (same as obstacleGrid)
        vector<vector<int>> dp(m, vector<int>(n, 0));

        // Base case: starting point (if no obstacle)
        dp[0][0] = (obstacleGrid[0][0] == 0) ? 1 : 0;

        // Fill first column (only paths from top)
        for (int i = 1; i < m; i++) {
            if (obstacleGrid[i][0] == 0) {
                dp[i][0] = dp[i-1][0]; // Can only come from top
            }
        }

        // Fill first row (only paths from left)
        for (int j = 1; j < n; j++) {
            if (obstacleGrid[0][j] == 0) {
                dp[0][j] = dp[0][j-1]; // Can only come from left
            }
        }

        // Fill the rest of the table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 0) { // If no obstacle
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
                // Else remains 0 (obstacle blocks path)
            }
        }

        return dp[m-1][n-1]; // Return bottom-right corner
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1)
            return 0;
        /*
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return memo(0, 0, obstacleGrid, dp);
        */

        return tabulation(obstacleGrid);
    }
};
