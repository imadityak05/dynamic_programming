<-- Problem Statement -->
Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

CODE :
Approach : Sliding Window 

class Solution {
    int solve(vector<int>& nums1 , vector<int>& nums2){
        int n= nums1.size();
        int m= nums2.size();

        int maxLen =0;
        int right=0;
        while(right <n){
            int count =0;
            int i=right;
            int j=0;
            while(i<n && j<m){
                if(nums1[i]==nums2[j]){
                    count++;
                    maxLen= max(maxLen , count);
                }else count=0;
                i++;
                j++;
            }
            right++;
        }
        return maxLen;
    }
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        return max(solve(nums1, nums2), solve(nums2, nums1));
    }
};



Approach -2 :(using DP , LCS pattern)

class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), m = nums2.size(), ans = 0;
        vector<vector<int>> dp(n+1 , vector<int>(m+1 ,0));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(nums1[i-1]==nums2[j-1]){
                    dp[i][j]= dp[i-1][j-1]+1;
                    ans = max(ans , dp[i][j]);
                }else{
                    continue;
                }
            }
        }
        return ans;
    }
};
